### 기본 istio에는 operator.yaml 파일이 존재하지 않음, 따라서 operator를 init 해주어야 함
istioctl operator init

### init 실행 후 IstioOperator 리소스 생성
kubectl apply -f - <<EOF
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  namespace: istio-system
  name: istio-control-plane
spec:
  profile: default
EOF

### 리소스 생성 확인
kubectl get istiooperator -n istio-system

### IstioOperator 파일 수정
kubectl edit istiooperator istio-control-plane -n istio-system

### 현재 설정들을 모두 istio-operator.yaml파일로 복사 -> 내용 수정이 필요할 때마다 apply 필요
kubectl get istiooperator istio-control-plane -n istio-system -o yaml > istio-operator.yaml

### 인증서 latency tracing을 위해 아래 코드들을 istio-operator.yaml파일에 추가
spec:
  profile: default 하단에 추가
  meshConfig:
      defaultConfig:
        proxyMetadata:
          ISTIO_META_CERT_SIGNING: "true"
          ISTIO_META_TLS_DEBUG: "1"
          ISTIO_META_ENABLE_CERT_METRICS: "true"
          SECRET_TTL: "6h"  # (기본 24h → 6h로 변경)
### 이후 적용
istioctl install -f istio-operator.yaml --skip-confirmation
### istiod 재시작
kubectl rollout restart deploy/istiod -n istio-system
### 사이드카 재주입
kubectl rollout restart deploy -n default --selector app=productpage
### 자동 reload 활성화
istioctl install --set values.global.istioNamespace=istio-system \
  --set meshConfig.enableAutoCA=true


### istiod 메트릭 확인----------------------------------------
# istiod Pod 이름 확인
ISTIOD_POD=$(kubectl get pods -n istio-system -l app=istiod -o jsonpath='{.items[0].metadata.name}')

# CSR 처리 시간 (95th 백분위)
kubectl exec -n istio-system $ISTIOD_POD -c discovery -- \
  curl -s localhost:15014/metrics | grep 'grpc_server_handling_seconds_bucket{grpc_method="CreateCertificate"'

# 출력 예시:
grpc_server_handling_seconds_bucket{grpc_method="CreateCertificate",le="0.1"} 142
grpc_server_handling_seconds_bucket{grpc_method="CreateCertificate",le="0.5"} 155
------------------------------------------------------------

### 트래픽 발생
# 500회 요청 (간격 0.1초)
kubectl exec tmp-shell -c tmp-shell -- sh -c \
  "for i in \$(seq 1 500); do curl -s http://productpage:9080; sleep 0.1; done"

------------------------------------------------------------
/* 전체 인증서 지연 시간 = CSR 처리 + XDS 전파 */
(
  histogram_quantile(0.95, 
    rate(grpc_server_handling_seconds_bucket{
      grpc_service="istio.v1.auth.IstioCertificateService",
      grpc_method="CreateCertificate"
    }[5m]))
)
+
(
  histogram_quantile(0.95, 
    rate(pilot_xds_push_time_bucket{type="sds"}[5m]))
)
------------------------------------------------------------

########전체 인증서 관리 지연시간
CSR 처리 시간 (Envoy → istiod) + xds 업데이트 전파 시간 + 구성 변경 후 Envoy 적용 전체 시간
grpc_server_handling_seconds_bucket + pilot_xds_push_time_bucket + pilot_proxy_convergence_time_bucket
### xDS:
EDS(Endpoint Discovery Service) : 업스트림 클러스터의 엔드포인트들을 관리
CDS(Cluster Discovery Service) : 라우팅하는 동안 사용하는 업스트림 클러스터를 관리
RDS(Route Discovery Service) : 필터의 전체 라우트 설정을 관리하는 기능.
LDS(Listener Discovery Service) : 리스너를 관리하는 기능 (각종 필터관련 설정)

### Control plane에서 전체 인증서 지연시간 P95
(
  histogram_quantile(0.95, 
    rate(grpc_server_handling_seconds_bucket{
      grpc_service="istio.v1.auth.IstioCertificateService",
      grpc_method="CreateCertificate"}[60m])
  )
)
+
(
  histogram_quantile(0.95, 
    rate(pilot_xds_push_time_bucket[60m])
  )
)
+
(
  histogram_quantile(0.95, 
    rate(pilot_proxy_convergence_time_bucket[60m])
  )
)
